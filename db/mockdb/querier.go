// Code generated by MockGen. DO NOT EDIT.
// Source: db/sqlc/querier.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/ZenSam7/Education/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// BlockSession mocks base method.
func (m *MockQuerier) BlockSession(ctx context.Context, idSession pgtype.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockSession", ctx, idSession)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockSession indicates an expected call of BlockSession.
func (mr *MockQuerierMockRecorder) BlockSession(ctx, idSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockSession", reflect.TypeOf((*MockQuerier)(nil).BlockSession), ctx, idSession)
}

// CountRowsArticle mocks base method.
func (m *MockQuerier) CountRowsArticle(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRowsArticle", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRowsArticle indicates an expected call of CountRowsArticle.
func (mr *MockQuerierMockRecorder) CountRowsArticle(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRowsArticle", reflect.TypeOf((*MockQuerier)(nil).CountRowsArticle), ctx)
}

// CountRowsComment mocks base method.
func (m *MockQuerier) CountRowsComment(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRowsComment", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRowsComment indicates an expected call of CountRowsComment.
func (mr *MockQuerierMockRecorder) CountRowsComment(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRowsComment", reflect.TypeOf((*MockQuerier)(nil).CountRowsComment), ctx)
}

// CountRowsSessions mocks base method.
func (m *MockQuerier) CountRowsSessions(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRowsSessions", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRowsSessions indicates an expected call of CountRowsSessions.
func (mr *MockQuerierMockRecorder) CountRowsSessions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRowsSessions", reflect.TypeOf((*MockQuerier)(nil).CountRowsSessions), ctx)
}

// CountRowsUser mocks base method.
func (m *MockQuerier) CountRowsUser(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRowsUser", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRowsUser indicates an expected call of CountRowsUser.
func (mr *MockQuerierMockRecorder) CountRowsUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRowsUser", reflect.TypeOf((*MockQuerier)(nil).CountRowsUser), ctx)
}

// CreateArticle mocks base method.
func (m *MockQuerier) CreateArticle(ctx context.Context, arg db.CreateArticleParams) (db.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", ctx, arg)
	ret0, _ := ret[0].(db.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockQuerierMockRecorder) CreateArticle(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockQuerier)(nil).CreateArticle), ctx, arg)
}

// CreateComment mocks base method.
func (m *MockQuerier) CreateComment(ctx context.Context, arg db.CreateCommentParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, arg)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockQuerierMockRecorder) CreateComment(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockQuerier)(nil).CreateComment), ctx, arg)
}

// CreateSession mocks base method.
func (m *MockQuerier) CreateSession(ctx context.Context, arg db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, arg)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockQuerierMockRecorder) CreateSession(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockQuerier)(nil).CreateSession), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// CreateVerifyRequest mocks base method.
func (m *MockQuerier) CreateVerifyRequest(ctx context.Context, arg db.CreateVerifyRequestParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyRequest", ctx, arg)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyRequest indicates an expected call of CreateVerifyRequest.
func (mr *MockQuerierMockRecorder) CreateVerifyRequest(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyRequest", reflect.TypeOf((*MockQuerier)(nil).CreateVerifyRequest), ctx, arg)
}

// DeleteArticle mocks base method.
func (m *MockQuerier) DeleteArticle(ctx context.Context, idArticle int32) (db.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", ctx, idArticle)
	ret0, _ := ret[0].(db.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockQuerierMockRecorder) DeleteArticle(ctx, idArticle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockQuerier)(nil).DeleteArticle), ctx, idArticle)
}

// DeleteComment mocks base method.
func (m *MockQuerier) DeleteComment(ctx context.Context, idComment int32) (db.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, idComment)
	ret0, _ := ret[0].(db.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockQuerierMockRecorder) DeleteComment(ctx, idComment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockQuerier)(nil).DeleteComment), ctx, idComment)
}

// DeleteSession mocks base method.
func (m *MockQuerier) DeleteSession(ctx context.Context, idSession pgtype.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, idSession)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockQuerierMockRecorder) DeleteSession(ctx, idSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockQuerier)(nil).DeleteSession), ctx, idSession)
}

// DeleteUser mocks base method.
func (m *MockQuerier) DeleteUser(ctx context.Context, idUser int32) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, idUser)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockQuerierMockRecorder) DeleteUser(ctx, idUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockQuerier)(nil).DeleteUser), ctx, idUser)
}

// DeleteVerifyRequest mocks base method.
func (m *MockQuerier) DeleteVerifyRequest(ctx context.Context, idUser int32) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVerifyRequest", ctx, idUser)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVerifyRequest indicates an expected call of DeleteVerifyRequest.
func (mr *MockQuerierMockRecorder) DeleteVerifyRequest(ctx, idUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVerifyRequest", reflect.TypeOf((*MockQuerier)(nil).DeleteVerifyRequest), ctx, idUser)
}

// EditArticle mocks base method.
func (m *MockQuerier) EditArticle(ctx context.Context, arg db.EditArticleParams) (db.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditArticle", ctx, arg)
	ret0, _ := ret[0].(db.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditArticle indicates an expected call of EditArticle.
func (mr *MockQuerierMockRecorder) EditArticle(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditArticle", reflect.TypeOf((*MockQuerier)(nil).EditArticle), ctx, arg)
}

// EditComment mocks base method.
func (m *MockQuerier) EditComment(ctx context.Context, arg db.EditCommentParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", ctx, arg)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditComment indicates an expected call of EditComment.
func (mr *MockQuerierMockRecorder) EditComment(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockQuerier)(nil).EditComment), ctx, arg)
}

// EditUser mocks base method.
func (m *MockQuerier) EditUser(ctx context.Context, arg db.EditUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditUser indicates an expected call of EditUser.
func (mr *MockQuerierMockRecorder) EditUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUser", reflect.TypeOf((*MockQuerier)(nil).EditUser), ctx, arg)
}

// GetArticle mocks base method.
func (m *MockQuerier) GetArticle(ctx context.Context, idArticle int32) (db.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", ctx, idArticle)
	ret0, _ := ret[0].(db.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockQuerierMockRecorder) GetArticle(ctx, idArticle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockQuerier)(nil).GetArticle), ctx, idArticle)
}

// GetArticlesWithAttribute mocks base method.
func (m *MockQuerier) GetArticlesWithAttribute(ctx context.Context, arg db.GetArticlesWithAttributeParams) ([]db.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticlesWithAttribute", ctx, arg)
	ret0, _ := ret[0].([]db.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticlesWithAttribute indicates an expected call of GetArticlesWithAttribute.
func (mr *MockQuerierMockRecorder) GetArticlesWithAttribute(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticlesWithAttribute", reflect.TypeOf((*MockQuerier)(nil).GetArticlesWithAttribute), ctx, arg)
}

// GetComment mocks base method.
func (m *MockQuerier) GetComment(ctx context.Context, idComment int32) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx, idComment)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockQuerierMockRecorder) GetComment(ctx, idComment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockQuerier)(nil).GetComment), ctx, idComment)
}

// GetCommentsOfArticle mocks base method.
func (m *MockQuerier) GetCommentsOfArticle(ctx context.Context, arg db.GetCommentsOfArticleParams) ([]db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsOfArticle", ctx, arg)
	ret0, _ := ret[0].([]db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsOfArticle indicates an expected call of GetCommentsOfArticle.
func (mr *MockQuerierMockRecorder) GetCommentsOfArticle(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsOfArticle", reflect.TypeOf((*MockQuerier)(nil).GetCommentsOfArticle), ctx, arg)
}

// GetManySortedArticles mocks base method.
func (m *MockQuerier) GetManySortedArticles(ctx context.Context, arg db.GetManySortedArticlesParams) ([]db.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManySortedArticles", ctx, arg)
	ret0, _ := ret[0].([]db.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManySortedArticles indicates an expected call of GetManySortedArticles.
func (mr *MockQuerierMockRecorder) GetManySortedArticles(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManySortedArticles", reflect.TypeOf((*MockQuerier)(nil).GetManySortedArticles), ctx, arg)
}

// GetManySortedArticlesWithAttribute mocks base method.
func (m *MockQuerier) GetManySortedArticlesWithAttribute(ctx context.Context, arg db.GetManySortedArticlesWithAttributeParams) ([]db.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManySortedArticlesWithAttribute", ctx, arg)
	ret0, _ := ret[0].([]db.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManySortedArticlesWithAttribute indicates an expected call of GetManySortedArticlesWithAttribute.
func (mr *MockQuerierMockRecorder) GetManySortedArticlesWithAttribute(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManySortedArticlesWithAttribute", reflect.TypeOf((*MockQuerier)(nil).GetManySortedArticlesWithAttribute), ctx, arg)
}

// GetManySortedUsers mocks base method.
func (m *MockQuerier) GetManySortedUsers(ctx context.Context, arg db.GetManySortedUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManySortedUsers", ctx, arg)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManySortedUsers indicates an expected call of GetManySortedUsers.
func (mr *MockQuerierMockRecorder) GetManySortedUsers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManySortedUsers", reflect.TypeOf((*MockQuerier)(nil).GetManySortedUsers), ctx, arg)
}

// GetSession mocks base method.
func (m *MockQuerier) GetSession(ctx context.Context, idSession pgtype.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, idSession)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockQuerierMockRecorder) GetSession(ctx, idSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockQuerier)(nil).GetSession), ctx, idSession)
}

// GetUser mocks base method.
func (m *MockQuerier) GetUser(ctx context.Context, idUser int32) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, idUser)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockQuerierMockRecorder) GetUser(ctx, idUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockQuerier)(nil).GetUser), ctx, idUser)
}

// GetUserFromName mocks base method.
func (m *MockQuerier) GetUserFromName(ctx context.Context, name string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromName", ctx, name)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFromName indicates an expected call of GetUserFromName.
func (mr *MockQuerierMockRecorder) GetUserFromName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromName", reflect.TypeOf((*MockQuerier)(nil).GetUserFromName), ctx, name)
}

// GetVerifyRequest mocks base method.
func (m *MockQuerier) GetVerifyRequest(ctx context.Context, idUser int32) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyRequest", ctx, idUser)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifyRequest indicates an expected call of GetVerifyRequest.
func (mr *MockQuerierMockRecorder) GetVerifyRequest(ctx, idUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyRequest", reflect.TypeOf((*MockQuerier)(nil).GetVerifyRequest), ctx, idUser)
}

// SetEmailIsVerified mocks base method.
func (m *MockQuerier) SetEmailIsVerified(ctx context.Context, idUser int32) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEmailIsVerified", ctx, idUser)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEmailIsVerified indicates an expected call of SetEmailIsVerified.
func (mr *MockQuerierMockRecorder) SetEmailIsVerified(ctx, idUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEmailIsVerified", reflect.TypeOf((*MockQuerier)(nil).SetEmailIsVerified), ctx, idUser)
}
