// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: comment.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :exec
WITH add_comment AS (
    INSERT INTO comments (text, from_user)
    VALUES ($3, $2)
)
UPDATE articles
SET comments = array_append(comments, currval(pg_get_serial_sequence('comments','id_comment')))
WHERE id_article = $1
`

type CreateCommentParams struct {
	IDArticle int32
	FromUser  int32
	Text      string
}

// CreateComment Создаём комментарий к статье
func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) error {
	_, err := q.db.Exec(ctx, createComment, arg.IDArticle, arg.FromUser, arg.Text)
	return err
}

const deleteComment = `-- name: DeleteComment :exec
WITH deleted_comment_id AS (
    DELETE FROM comments
    WHERE id_comment = $2
)
UPDATE articles
SET comments = array_remove(comments, $2)
WHERE id_article = $1
`

type DeleteCommentParams struct {
	IDArticle   int32
	ArrayRemove int32
}

// DeleteComment Удаляем комментарий к статье
func (q *Queries) DeleteComment(ctx context.Context, arg DeleteCommentParams) error {
	_, err := q.db.Exec(ctx, deleteComment, arg.IDArticle, arg.ArrayRemove)
	return err
}

const editCommentText = `-- name: EditCommentText :exec
WITH update_time AS (
    UPDATE comments
    SET edited_at = now()
    WHERE id_comment = $1::integer
)
UPDATE comments
SET text = $2::text
WHERE id_comment = $1::integer
`

type EditCommentTextParams struct {
	Column1 int32
	Column2 string
}

// EditCommentText Изменяем текст комментария и обновляем время изменения комментария (Column1 = id_comment, Column1 = text)
func (q *Queries) EditCommentText(ctx context.Context, arg EditCommentTextParams) error {
	_, err := q.db.Exec(ctx, editCommentText, arg.Column1, arg.Column2)
	return err
}

const getComment = `-- name: GetComment :exec
SELECT id_comment, created_at, edited_at, text, from_user, evaluation FROM comments
WHERE id_comment = $1
`

// GetComment Возвращаем комментарий
func (q *Queries) GetComment(ctx context.Context, idComment int32) error {
	_, err := q.db.Exec(ctx, getComment, idComment)
	return err
}
