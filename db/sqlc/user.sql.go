// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, description, email, karma
) VALUES (
  $1, $2, $3, 0
)
RETURNING id, created_at, name, description, email, karma
`

type CreateUserParams struct {
	Name        string
	Description pgtype.Text
	Email       pgtype.Text
}

// CreateUser Создаём одного пользователя
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.Db.QueryRow(ctx, createUser, arg.Name, arg.Description, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.Email,
		&i.Karma,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE name = $1
`

// DeleteUser Удаляем пользователя по имени
func (q *Queries) DeleteUser(ctx context.Context, name string) error {
	_, err := q.Db.Exec(ctx, deleteUser, name)
	return err
}

const getManyUsers = `-- name: GetManyUsers :many
SELECT id, created_at, name, description, email, karma FROM users
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type GetManyUsersParams struct {
	Limit  int64
	Offset int64
}

// GetManyUsers Возвращаем слайс пользователей (сортируем по дате создания)
func (q *Queries) GetManyUsers(ctx context.Context, arg GetManyUsersParams) ([]User, error) {
	rows, err := q.Db.Query(ctx, getManyUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Description,
			&i.Email,
			&i.Karma,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, name, description, email, karma FROM users
WHERE id = $1
`

// GetUser Возвращаем пользователя по его id
func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.Db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.Email,
		&i.Karma,
	)
	return i, err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE users
SET name = $2
WHERE id = $1
`

type UpdateUserNameParams struct {
	ID   int64
	Name string
}

// UpdateUserName Обновляем имя пользователя по его id
func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.Db.Exec(ctx, updateUserName, arg.ID, arg.Name)
	return err
}
