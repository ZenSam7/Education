// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (name, description, email)
VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	Name        string
	Description string
	Email       string
}

// CreateUser Создаём пользователя
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Name, arg.Description, arg.Email)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id_user = $1
`

// DeleteUser Удаляем пользователя
func (q *Queries) DeleteUser(ctx context.Context, idUser int32) error {
	_, err := q.db.Exec(ctx, deleteUser, idUser)
	return err
}

const editUserDescription = `-- name: EditUserDescription :exec
UPDATE users
SET description = $2
WHERE id_user = $1
`

type EditUserDescriptionParams struct {
	IDUser      int32
	Description string
}

// EditUserDescription Изменяем описание пользователя
func (q *Queries) EditUserDescription(ctx context.Context, arg EditUserDescriptionParams) error {
	_, err := q.db.Exec(ctx, editUserDescription, arg.IDUser, arg.Description)
	return err
}

const editUserEmail = `-- name: EditUserEmail :exec
UPDATE users
SET email = $2
WHERE id_user = $1
`

type EditUserEmailParams struct {
	IDUser int32
	Email  string
}

// EditUserEmail Изменяем почту пользователя
func (q *Queries) EditUserEmail(ctx context.Context, arg EditUserEmailParams) error {
	_, err := q.db.Exec(ctx, editUserEmail, arg.IDUser, arg.Email)
	return err
}

const editUserKarma = `-- name: EditUserKarma :exec
UPDATE users
SET karma = $2
WHERE id_user = $1
`

type EditUserKarmaParams struct {
	IDUser int32
	Karma  int32
}

// EditUserKarma Изменяем карму пользователя
func (q *Queries) EditUserKarma(ctx context.Context, arg EditUserKarmaParams) error {
	_, err := q.db.Exec(ctx, editUserKarma, arg.IDUser, arg.Karma)
	return err
}

const editUserName = `-- name: EditUserName :exec
UPDATE users
SET name = $2
WHERE id_user = $1
`

type EditUserNameParams struct {
	IDUser int32
	Name   string
}

// EditUserName Изменяем имя пользователя
func (q *Queries) EditUserName(ctx context.Context, arg EditUserNameParams) error {
	_, err := q.db.Exec(ctx, editUserName, arg.IDUser, arg.Name)
	return err
}

const getManyUsers = `-- name: GetManyUsers :many
SELECT id_user, created_at, name, description, email, karma FROM users
ORDER BY $1::text
LIMIT $2
OFFSET $3
`

type GetManyUsersParams struct {
	Column1 string
	Limit   int64
	Offset  int64
}

// GetManyUsers Возвращаем слайс пользователей отсортированных по параметру Column1
func (q *Queries) GetManyUsers(ctx context.Context, arg GetManyUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getManyUsers, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.IDUser,
			&i.CreatedAt,
			&i.Name,
			&i.Description,
			&i.Email,
			&i.Karma,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id_user, created_at, name, description, email, karma FROM users
WHERE id_user = $1
`

// GetUser Возвращаем пользователя
func (q *Queries) GetUser(ctx context.Context, idUser int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, idUser)
	var i User
	err := row.Scan(
		&i.IDUser,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.Email,
		&i.Karma,
	)
	return i, err
}
