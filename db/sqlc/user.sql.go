// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, description)
VALUES ($1::text, $2::text)
RETURNING id_user, created_at, name, description, karma
`

type CreateUserParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

// CreateUser Создаём пользователя
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Description)
	var i User
	err := row.Scan(
		&i.IDUser,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.Karma,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
WITH update_id AS (
    UPDATE users
    SET id_user = id_user - 1
    WHERE id_user > $1::integer
)
DELETE FROM users
WHERE id_user = $1::integer
RETURNING id_user, created_at, name, description, karma
`

// DeleteUser Удаляем пользователя и сдвигаем id
func (q *Queries) DeleteUser(ctx context.Context, idUser int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, idUser)
	var i User
	err := row.Scan(
		&i.IDUser,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.Karma,
	)
	return i, err
}

const editUserParam = `-- name: EditUserParam :one
UPDATE users
SET
  -- Крч если через go передать в качестве текстового аргумента nil то он замениться на '',
  -- а '' != NULL поэтому она вставиться как пустая строка, хотя в go мы передали nil
  name = CASE WHEN $1::text <> '' THEN $1::text ELSE name END,
  description = CASE WHEN $2::text <> '' THEN $2::text ELSE description END,
  karma = COALESCE($3::integer, karma)
WHERE id_user = $4::integer
RETURNING id_user, created_at, name, description, karma
`

type EditUserParamParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Karma       int32  `json:"karma"`
	IDUser      int32  `json:"id_user"`
}

// EditUserParam Изменяем параметр(ы) пользователя
func (q *Queries) EditUserParam(ctx context.Context, arg EditUserParamParams) (User, error) {
	row := q.db.QueryRow(ctx, editUserParam,
		arg.Name,
		arg.Description,
		arg.Karma,
		arg.IDUser,
	)
	var i User
	err := row.Scan(
		&i.IDUser,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.Karma,
	)
	return i, err
}

const getManySortedUsers = `-- name: GetManySortedUsers :many
SELECT id_user, created_at, name, description, karma FROM users
ORDER BY CASE WHEN $1::boolean THEN name
            WHEN $2::boolean THEN id_user::text
            WHEN $3::boolean THEN description
            WHEN $4::boolean THEN karma::text
            ELSE id_user::text END
LIMIT $6::integer
OFFSET $5::integer
`

type GetManySortedUsersParams struct {
	Name        bool  `json:"name"`
	IDUser      bool  `json:"id_user"`
	Description bool  `json:"description"`
	Karma       bool  `json:"karma"`
	Offset      int32 `json:"Offset"`
	Limit       int32 `json:"Limit"`
}

// GetManySortedUsers Возвращаем слайс пользователей отсортированных по какому-то параметру
// (можно поставить: id_user, и сортировки не будет)
func (q *Queries) GetManySortedUsers(ctx context.Context, arg GetManySortedUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getManySortedUsers,
		arg.Name,
		arg.IDUser,
		arg.Description,
		arg.Karma,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.IDUser,
			&i.CreatedAt,
			&i.Name,
			&i.Description,
			&i.Karma,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id_user, created_at, name, description, karma FROM users
WHERE id_user = $1
`

// GetUser Возвращаем пользователя
func (q *Queries) GetUser(ctx context.Context, idUser int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, idUser)
	var i User
	err := row.Scan(
		&i.IDUser,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.Karma,
	)
	return i, err
}
