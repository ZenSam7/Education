syntax = "proto3";

// Всё как в go
package protobuf;
option go_package = "github.com/ZenSam7/Education/protobuf";
import "user.proto";
import "comment.proto";
import "article.proto";
import "image.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/option/annotations.proto";

// Описываем что-то типа интерфейса (типа как querier interface)
service Education {
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
          post: "/create_user"
          body: "*"
        };
  };
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
          get: "/get_user"
        };
  };
  rpc GetManySortedUsers(GetManySortedUsersRequest) returns (GetManySortedUsersResponse) {
        option (google.api.http) = {
          get: "/get_many_sorted_users"
        };
  };
  rpc EditUser(EditUserRequest) returns (EditUserResponse) {
        option (google.api.http) = {
          patch: "/edit_user"
          body: "*"
        };
  };
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
          delete: "/delete_user"
        };
  };
  rpc LoginUser(LoginUserRequest) returns (LoginUserResponse) {
        option (google.api.http) = {
          post: "/login_user"
          body: "*"
        };
  };
  rpc RenewAccessToken(RenewAccessTokenRequest) returns (RenewAccessTokenResponse) {
        option (google.api.http) = {
          post: "/renew_access_token"
          body: "*"
        };
  };
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
        option (google.api.http) = {
          get: "/verify_email"
        };
  };


  rpc CreateComment(CreateCommentRequest) returns (CreateCommentResponse) {
        option (google.api.http) = {
          post: "/create_comment"
          body: "*"
        };
  };
  rpc GetComment(GetCommentRequest) returns (GetCommentResponse) {
        option (google.api.http) = {
          get: "/get_comment"
        };
  };
  rpc GetCommentsOfArticle(GetCommentsOfArticleRequest) returns (GetCommentsOfArticleResponse) {
      option (google.api.http) = {
        get: "/comments_of_article"
      };
  };
  rpc EditComment(EditCommentRequest) returns (EditCommentResponse) {
        option (google.api.http) = {
          patch: "/edit_comment"
          body: "*"
        };
  };
  rpc DeleteComment(DeleteCommentRequest) returns (DeleteCommentResponse) {
        option (google.api.http) = {
          delete: "/delete_comment"
        };
  };


  rpc CreateArticle(CreateArticleRequest) returns (CreateArticleResponse) {
        option (google.api.http) = {
          post: "/create_article"
          body: "*"
        };
  };
  rpc GetArticle(GetArticleRequest) returns (GetArticleResponse) {
        option (google.api.http) = {
          get: "/get_article"
        };
  };
  rpc EditArticle(EditArticleRequest) returns (EditArticleResponse) {
        option (google.api.http) = {
          patch: "/edit_article"
          body: "*"
        };
  };
  rpc DeleteArticle(DeleteArticleRequest) returns (DeleteArticleResponse) {
        option (google.api.http) = {
          delete: "/delete_article"
        };
  };
  rpc GetArticlesWithAttribute(GetArticlesWithAttributeRequest) returns (GetArticlesWithAttributeResponse) {
        option (google.api.http) = {
          get: "/get_articles_with_attribute"
        };
  };
  rpc GetManySortedArticles(GetManySortedArticlesRequest) returns (GetManySortedArticlesResponse) {
        option (google.api.http) = {
          get: "/get_many_sorted_articles"
        };
  };
  rpc GetManySortedArticlesWithAttribute(GetManySortedArticlesWithAttributeRequest) returns (GetManySortedArticlesWithAttributeResponse) {
        option (google.api.http) = {
          get: "/get_many_sorted_articles_with_attribute"
        };
  };


  rpc GetImage(GetImageRequest) returns (GetImageResponse) {
    option (google.api.http) = {
      get: "/get_image/{id_image}"
    };
  };
  rpc EditImage(EditImageRequest) returns (EditImageResponse) {
    option (google.api.http) = {
      patch: "/edit_image"
      body: "*"
    };
  }
; rpc DeleteImage(DeleteImageRequest) returns (DeleteImageResponse) {
    option (google.api.http) = {
      delete: "/delete_image/{id_image}"
    };
  };
  rpc LoadImage(LoadImageRequest) returns (LoadImageResponse) {
    option (google.api.http) = {
      post: "/load_image"
      body: "*"
    };
  };
  rpc RenameImage(RenameImageRequest) returns (RenameImageResponse) {
    option (google.api.http) = {
      patch: "/rename_image"
      body: "*"
    };
  };
}


// Это уже дополнительная инфа для автогенерации документации
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Education";
    version: "0.8";
    contact: {
      name: "ZenSam7";
      url: "https://github.com/ZenSam7";
    }
  };
};
